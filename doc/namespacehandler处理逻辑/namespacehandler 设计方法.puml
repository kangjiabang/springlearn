@startuml


interface NamespaceHandler
abstract NamespaceHandlerSupport
class  AopNamespaceHandler
note left of  AopNamespaceHandler
  public void init()
		// In 2.0 XSD as well as in 2.1 XSD.
		registerBeanDefinitionParser("config", new ConfigBeanDefinitionParser());
		registerBeanDefinitionParser("aspectj-autoproxy", new AspectJAutoProxyBeanDefinitionParser());
		registerBeanDefinitionDecorator("scoped-proxy", new ScopedProxyBeanDefinitionDecorator());

		// Only in 2.0 XSD: moved to context namespace as of 2.1
		registerBeanDefinitionParser("spring-configured", new SpringConfiguredBeanDefinitionParser());
	}
end note

class  DubboNamespaceHandler
interface NamespaceHandlerResolver
class  DefaultNamespaceHandlerResolver

interface BeanDefinitionParser


NamespaceHandlerResolver <|.. DefaultNamespaceHandlerResolver
NamespaceHandler  <|.. NamespaceHandlerSupport
NamespaceHandlerSupport <|-- AopNamespaceHandler
NamespaceHandlerSupport <|-- DubboNamespaceHandler
DefaultNamespaceHandlerResolver --> "*" NamespaceHandler
NamespaceHandlerSupport  --> "*" BeanDefinitionParser

BeanDefinitionParser  <|.. ConfigBeanDefinitionParser
BeanDefinitionParser  <|.. AspectJAutoProxyBeanDefinitionParser
BeanDefinitionParser  <|.. ScopedProxyBeanDefinitionDecorator
BeanDefinitionParser  <|.. SpringConfiguredBeanDefinitionParser

interface NamespaceHandler {
  void init();
}

class AopNamespaceHandler {
  @override void init();
}


interface NamespaceHandlerResolver {
    NamespaceHandler resolve(String namespaceUri);
}

interface BeanDefinitionParser {
   BeanDefinition parse(Element element, ParserContext parserContext)
}


class NamespaceHandlerSupport {
   Map<String, BeanDefinitionParser> parsers;

   void registerBeanDefinitionParser(String elementName, BeanDefinitionParser parser);
}
class DefaultNamespaceHandlerResolver {
   String DEFAULT_HANDLER_MAPPINGS_LOCATION = "META-INF/spring.handlers";

   /** mappings from namespace URI to NamespaceHandler */
   Map<String, Object> handlerMappings;
}


@enduml